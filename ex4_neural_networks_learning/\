function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%

% Make y into a bunch of binary vectors (0 and 1s)
Y = zeros(m,num_labels);
% this is the for loop version:
%examples = 1:m;
%for i=examples,	
%	Y(i,y(i))=1;
%end;

% this is the vectorized version
Y(sub2ind(size(Y),1:m,y'))=1;
% This is NOT a correct Vectorized solution
%Y(:,y')=1;

% Forward Propagation
a1 = [ones(size(X(:,1))),X] ;
z2 = a1*Theta1';

a2 = [ones(size(z2(:,1))), sigmoid(z2)];
z3 = a2*Theta2';

a3 = sigmoid(z3);
hOfX = a3;

% Regularization Term
Theta1Squared = Theta1(:,2:end).^2;
Theta2Squared = Theta2(:,2:end).^2;
regTerm = (lambda/(2*m))*((sum(sum(Theta1Squared)))+(sum(sum(Theta2Squared))));

% Regularized Cost Function
J = (-(1/m))*sum(sum((Y.*log(hOfX))+((1-Y).*log(1-hOfX)),1))+regTerm;

% This is the above formula broken into pieces
%negOneOverM = -(1/m);
%oneMinusY = 1-Y;
%oneMinusHOfX = 1-hOfX;
%logHOfX = log(hOfX);
%logOneMinusHOfX = log(1-hOfX);
%insideTheSum = ( (Y.*logHOfX)+(oneMinusY.*logOneMinusHOfX));
%sumOverK = sum(insideTheSum,1);
%sumOverExamples = sum(sumOverK);
%J = negOneOverM*sumOverExamples;


% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
%disp("size of a1:");
%disp(size(a1));
%disp("size of Theta1:");
%disp(size(Theta1));

DELTA1=zeros(size(Theta1));

for i=1:5,  %m,
a1=X(i,:);
z2=([1,a1])*Theta1';
a2=sigmoid(z2);
%disp(size([1,a2]));
z3=([1,a2])*Theta2';
a3=sigmoid(z3);
disp(a3);

%	disp("size of a1 in loop:");
%	disp(size(a1));
%	disp("size of a2 in loop:");
%	disp(size(a2));
%	disp("size of a3 in loop:");
%	disp(size(a3));

end;



% This doesn't work:
%delta3 = a3-Y;
%disp("delta3");
%disp(size(delta3));
%disp(delta3(1:5,:));
%delta2 = ((delta3*Theta2)(:,2:end)).*sigmoidGradient(z2);
%disp(size(delta2));
%Delta1 = a1*delta2;
%Delta2 = sum(delta3*a2');

% Part 3: Implement regularization with the cost function and gradients.

%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%



















% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
